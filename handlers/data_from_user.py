from loader import dp
from aiogram import types
from aiogram.dispatcher import FSMContext
from state.user_data import UserInfo
import time
from loader import bot


@dp.message_handler(text='–î–∞–Ω–Ω—ã–µ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ P.–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞', state=None
                    )
async def data(message: types.Message):
    await bot.send_message(chat_id=f'{message.from_user.id}', text='–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ –≤ –†–µ—Å–ø—É–±–ª–∏–∫–µ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω —Ç—Ä–µ–±—É—é—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –Ω–∏–∂–µ–ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ‚úçüèª\n–ò–º—è:\n–§–∞–º–∏–ª–∏—è:\n–ù–æ–º–µ—Ä —Ç–µ–ªüì±:\n–ü–∞—Å–ø–æ—Ä—Ç ‚Ññ:')
    time.sleep(5)
    await UserInfo.f_name.set()
    await bot.send_message(chat_id=f'{message.from_user.id}', text='–°–µ–π—á–∞—Å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
    await UserInfo.next()


@dp.message_handler(state=UserInfo.l_name)
async def data(message: types.Message, state: FSMContext):
    f_name = message.text
    async with state.proxy() as data_citizen:
        data_citizen['f_name'] = f_name.capitalize()
    time.sleep(1)
    await bot.send_message(chat_id=f'{message.from_user.id}', text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é!')
    await UserInfo.next()


@dp.message_handler(state=UserInfo.phone_number)
async def data(message: types.Message, state: FSMContext):
    l_name = message.text
    async with state.proxy() as data_citizen:
        data_citizen['l_name'] = l_name.capitalize()
    time.sleep(1)
    await bot.send_message(chat_id=f'{message.from_user.id}', text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω—ã–π –Ω–æ–º–µ—Ä!')
    await UserInfo.next()


@dp.message_handler(state=UserInfo.passport_id)
async def data(message: types.Message, state: FSMContext):
    phone = message.text
    async with state.proxy() as data_citizen:
        data_citizen['phone_number'] = phone
    time.sleep(1)
    await UserInfo.next()
    await bot.send_message(chat_id=f'{message.from_user.id}', text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞!')


@dp.message_handler()
async def data(message: types.Message, state: FSMContext):
    p_num = message.text
    async with state.proxy() as data_citizen:
        data_citizen['passport_id'] = p_num
    time.sleep(2)
    await state.finish()
    await message.answer(f'–í—ã –ü—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç –Ω–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†.–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω\n'
                         f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞—á–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n'
                         f'–ò–º—è: {data_citizen["f_name"]}\n–§–∞–º–∏–ª–∏—è: {data_citizen["l_name"]}\n'
                         f'–ù–æ–º–µ—Ä —Ç–µ–ªüì±: {data_citizen["phone_number"]}\n–ü–∞—Å–ø–æ—Ä—Ç ‚Ññ: {data_citizen["passport_id"]}')


